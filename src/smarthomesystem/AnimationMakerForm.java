/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smarthomesystem;

import auxclasses.ComponentResizer;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseEvent;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 *
 * @author Manel
 */
public class AnimationMakerForm extends javax.swing.JFrame {

    public static boolean CAN_MOVE_WINDOW = true;
    int offX = 0, offY = 0;
    boolean resizing = false;

    /**
     * Creates new form AnimationMakerForm
     */
    ComponentResizer cr;

    public AnimationMakerForm() {
        initComponents();
        cr = new ComponentResizer();
        cr.registerComponent(AnimationMakerForm.this);
        setLocationRelativeTo(null);
        //setExtendedState(JFrame.MAXIMIZED_BOTH);
        animationMakerPanel1.initialiseLEDStrip(75);
        animationMakerPanel1.initInterface();
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent evt) {
                if (LED.DRAW_MODE == LED.DrawMode.BIG) {
                    LED.BIG_LED_SIZE = getWidth() / animationMakerPanel1.NUM_LEDS;
                    animationMakerPanel1.repositionLEDsForDrawModeBIG();
                }
                animationMakerPanel1.windowResized();
                resizing = true;
            }
        });
    }

    @Override
    public void setVisible(boolean state) {
        super.setVisible(state);
        if (state) {
            SmartHomeSystem.getSmartHomeSystem().getAnimationSender().initialise();
        } else {
            SmartHomeSystem.getSmartHomeSystem().getAnimationSender().terminate();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        animationMakerPanel1 = new smarthomesystem.AnimationMakerPanel();

        setUndecorated(true);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout animationMakerPanel1Layout = new javax.swing.GroupLayout(animationMakerPanel1);
        animationMakerPanel1.setLayout(animationMakerPanel1Layout);
        animationMakerPanel1Layout.setHorizontalGroup(
            animationMakerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 530, Short.MAX_VALUE)
        );
        animationMakerPanel1Layout.setVerticalGroup(
            animationMakerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(animationMakerPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(animationMakerPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        if (evt.getWheelRotation() == -1) {
            animationMakerPanel1.upscale();
        } else {
            animationMakerPanel1.downscale();
        }
    }//GEN-LAST:event_formMouseWheelMoved

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (animationMakerPanel1.noLedIsHovered()) {
            CAN_MOVE_WINDOW = true;
            resizing = false;
        }

        animationMakerPanel1.mousePressed(evt);
        offX = evt.getX();
        offY = evt.getY();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (!resizing) {
            if (LED.CAN_MOVE) {
                if (SwingUtilities.isLeftMouseButton(evt)) {
                    animationMakerPanel1.moveStrip(evt);
                }
            } else if (FrameHolder.CAN_MOVE) {
                if (SwingUtilities.isMiddleMouseButton(evt)) {
                    animationMakerPanel1.moveFrameHolders(evt);
                }
            } else {
                if (CAN_MOVE_WINDOW && SwingUtilities.isLeftMouseButton(evt)) {
                    setLocation(getX() + evt.getX() - offX, getY() + evt.getY() - offY);
                }
            }
        }
    }//GEN-LAST:event_formMouseDragged

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        animationMakerPanel1.mouseMoved(evt);
    }//GEN-LAST:event_formMouseMoved

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1 && !LED.CAN_MOVE && animationMakerPanel1.isValidDoubleClickToResize()) {
            if (getExtendedState() == JFrame.MAXIMIZED_BOTH) {
                setExtendedState(JFrame.NORMAL);
            } else {
                setExtendedState(JFrame.MAXIMIZED_BOTH);
            }
        }
    }//GEN-LAST:event_formMouseClicked

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        animationMakerPanel1.mouseReleased(evt);
        resizing = false;
        validate();
    }//GEN-LAST:event_formMouseReleased

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        animationMakerPanel1.keyPressed(evt);
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        animationMakerPanel1.keyReleased(evt);
    }//GEN-LAST:event_formKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public smarthomesystem.AnimationMakerPanel animationMakerPanel1;
    // End of variables declaration//GEN-END:variables
}
